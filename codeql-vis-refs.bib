@article{10.1145/1353535.1346308,
author = {Mysore, Shashidhar and Mazloom, Bita and Agrawal, Banit and Sherwood, Timothy},
title = {Understanding and Visualizing Full Systems with Data Flow Tomography},
year = {2008},
issue_date = {March 2008},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {42},
number = {2},
issn = {0163-5980},
url = {https://doi.org/10.1145/1353535.1346308},
doi = {10.1145/1353535.1346308},
abstract = {It is not uncommon for modern systems to be composed of a variety of interacting services, running across multiple machines in such a way that most developers do not really understand the whole system. As abstraction is layered atop abstraction, developers gain the ability to compose systems of extraordinary complexity with relative ease. However, many software properties, especially those that cut across abstraction layers, become very difficult to understand in such compositions. The communication patterns involved, the privacy of critical data, and the provenance of information, can be difficult to find and understand, even with access to all of the source code. The goal of Data Flow Tomography is to use the inherent information flow of such systems to help visualize the interactions between complex and interwoven components across multiple layers of abstraction. In the same way that the injection of short-lived radioactive isotopes help doctors trace problems in the cardiovascular system, the use of "data tagging" can help developers slice through the extraneous layers of software and pin-point those portions of the system interacting with the data of interest. To demonstrate the feasibility of this approach we have developed a prototype system in which tags are tracked both through the machine and in between machines over the network, and from which novel visualizations of the whole system can be derived. We describe the system-level challenges in creating a working system tomography tool and we qualitatively evaluate our system by examining several example real world scenarios.},
journal = {SIGOPS Oper. Syst. Rev.},
month = mar,
pages = {211–221},
numpages = {11},
keywords = {virtual machine, tomography, data flow tracking}
}

@inproceedings{10.1145/3183440.3183470,
author = {Do, Lisa Nguyen Quang and Kr\"{u}ger, Stefan and Hill, Patrick and Ali, Karim and Bodden, Eric},
title = {VISUFLOW: A Debugging Environment for Static Analyses},
year = {2018},
isbn = {9781450356633},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3183440.3183470},
doi = {10.1145/3183440.3183470},
abstract = {Code developers in industry frequently use static analysis tools to detect and fix software defects in their code. But what about defects in the static analyses themselves? While debugging application code is a difficult, time-consuming task, debugging a static analysis is even harder. We have surveyed 115 static analysis writers to determine what makes static analysis difficult to debug, and to identify which debugging features would be desirable for static analysis. Based on this information, we have created Visijflow, a debugging environment for static data-flow analysis. Visuflow is built as an Eclipse plugin, and supports analyses written on top of the program analysis framework Soot. The different components in Visuflow provide analysis writers with visualizations of the internal computations of the analysis, and actionable debugging features to support debugging static analyses. A video demo of Visuflow is available online: https://www.youtube.com/watch?v=BkEfBDwiuH4},
booktitle = {Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings},
pages = {89–92},
numpages = {4},
keywords = {user study, survey, IDE, static analysis, empirical software engineering, debugging},
location = {Gothenburg, Sweden},
series = {ICSE '18}
}

@online{Semmle_CodeQL_About,
author = {Semmle},
year = {2020},
title = {About CodeQL},
url = {https://help.semmle.com/codeql/about-codeql.html},
lastaccessed = {December 6, 2020}
}

@online{Semmle_GitHub,
author = {Oege de Moor},
year = {2019},
title = {Securing software together: GitHub + Semmle},
url = {https://blog.semmle.com/secure-software-github-semmle/},
month = {sep},
lastaccessed = {December 6, 2020}
}

@online{Semmle_LGTM,
author = {Semmle},
title = {About LGTM},
url = {https://lgtm.com/help/lgtm/about-lgtm},
lastaccessed = {December 6, 2020}
}

@online{GitHub_SecurtyLab_CodeQL,
author = {GitHub},
year = {2020},
title = {CodeQL for research},
url = {https://securitylab.github.com/tools/codeql},
lastaccessed = {December 6, 2020}
}

@online{CodeSonar,
author = {GrammaTech},
year = {2020},
title = {Static Analysis with CodeSonar},
url = {https://www.grammatech.com/products/source-code-analysis},
lastaccessed = {December 7, 2020}
}